<!doctype html>
<html lang="en">
<head>
  <meta http-equiv="Content-type" content="text/html; charset=utf-8"/>
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link href="https://cdnjs.cloudflare.com/ajax/libs/github-markdown-css/3.0.1/github-markdown.min.css" rel='stylesheet'>
  <% for (var key in htmlWebpackPlugin.files.css) { %>
    <link href="<%= htmlWebpackPlugin.files.css[key] %>" rel="stylesheet">
  <% } %>
  <% for (var key in htmlWebpackPlugin.files.js) { %>
    <script type="text/javascript" src="<%= htmlWebpackPlugin.files.js[key] %>"></script>
  <% } %>
  <title>Rise Client Documentation</title>
</head>
<body>
  <div id="root" class='markdown-body' style="padding:20px">
    <h1>RISE Client Library Documentation</h1>
    <p>This library is designed to allow developers to interact easily with APIs compatible with <a href="https://rise.mpiwg-berlin.mpg.de/pages/doc_for_developers">SHINE</a>, a restful API protocol that allows clients to browse, filter and access a large number of open and licence-protected structured text resources from a wide variety of providers. Please visit the <a href="https://rise.mpiwg-berlin.mpg.de">RISE website</a> for more information about SHINE and the RISE project.</p>
    <h2>Installation</h2>
    <h3>Link to the library in your browser</h3>
    <p>Link to the <a href='rise_client.js' download='rise_client.js'>rise_client.js</a> file in the header of your html file. Alternatively, if you always want the latest version, you can also link to this file directly from our server at <a href="https://rise.mpiwg-berlin.mpg.de/jslib/rise_client.js">rise.mpiwg-berlin.mpg.de/jslib/rise_client.js</a>. You will need to make sure that your host is whitelisted by the SHINE-compatible instance you want to connect to; If you are not sure how to get your host or IP whitelisted, please get in touch with <a href="mailto:pbelouin@mpiwg-berlin.mpg.de">pbelouin@mpiwg-berlin.mpg.de</a>. The most popular RISE instance at the moment is hosted by the <a href="https://www.mpiwg-berlin.mpg.de/">Max Planck Institute for the History of Science</a> at <a href="https://rise.mpiwg-berlin.mpg.de">rise.mpiwg-berlin.mpg.de</a>.</p>
    <pre>
      &lt;script type="text/javascript" src="https://rise.mpiwg-berlin.mpg.de/jslib/rise_client.js"&gt;&lt;/script&gt;
    </pre>
    <h3>Using NPM or Yarn</h3>
    <p>run</p>
    <pre>npm install rise_client</pre>
    <p>at the root of your javascript project.</p>
    <h2>Usage</h2>
    <p>The library makes the <b>rise</b> object available. This object allows you to perform action on the SHINE-compatible instance of your choice. You first need to initialise this <b>rise</b> object by pointing it to the instance of your choice. Please note that using <i>setRemote()</i> without a parameter defaults to the <i>rise.mpiwg.berlin.mpg.de/api</i> instance URL.</p>
    <script>
    rise.init.setRemote()</script>
    <pre>
      rise.init.setRemote();<br>
      rise.init.setRemote('path_to.remote/instance/api');
    </pre>
    <h3>Authentication</h3>
    <p>Users can sign in using <i>auth.login()</i>. Please note that it is possible to use the API without signing in; In this case, the client will only have access to publicly accessible collections, resources, sections and content units.</p>
    <pre>
      rise.auth.login('user@email.com', 'user_password');
    </pre>
    <p>You can sign out the user by using <i>auth.logout()</i></p>
    <pre>
      rise.auth.logout();
    </pre>
    <p>Please note that it is also possible to authenticate calls to a RISE instance by using the <a href='https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/withCredentials'>XMLHttp​Request​.with​Credentials</a> property, which will use the active session of the RISE instance you are calling the tool from for authentication. If you are not sure about how to achieve this, please contact <a href="mailto:pbelouin@mpiwg-berlin.mpg.de">Pascal Belouin</a>.</p>
    <h2>Fetching text from a  RISE instance or a SHINE-compatible API</h2>
    <p> <a href="https://rise.mpiwg-berlin.mpg.de/pages/doc_for_developers">SHINE</a> is a restful API which allows clients to browse, filter and access a large number of open and licence-protected structured text resources from a wide variety of providers. The way the SHINE API models this data is shown in the figure below. This library makes this data accessible through the <b>rise</b> object, which features a number of functions, the most important of which are enumerated below.</p>
    <img src="https://rise.mpiwg-berlin.mpg.de/assets/rise_resource_domain_model_hz-fbdf8ea5ff7c023af7e520b8410121e814a100effd129989cfb0c027a310fce1.svg">


    <h3>Collections</h3>
    <p>Here is how you can get all the collections the user has access to. An optional filter can be set to filter the collections by name. In the example below, all the collections which have 'optional_filter_string' in their name will be put in the collections variable in the form of an array.</p>
    <pre>
      rise.collections.all({filter: 'optional_filter_setting'}).then(function(response){
        collections = response.text;
        // as an array: collections = JSON.parse(response.text);
      });
    </pre>
    <p>Live Example: calling</p>
    <pre>
      rise.collections.all().then(function(response){
         collections = response.text;
         document.getElementById("result").innerHTML = collections;
      });  
    </pre>
    returns:
      <pre>
        <script>
          rise.collections.all().then(function(response){
             collections = response.text;
             document.getElementById("result").innerHTML = collections;
          });  
        </script>
        <pre id='result'></pre>
      </pre>

    <h3>Collection Resources</h3>
    <p>You can fetch all the resources for a particular collection by using the following:</p>
    <pre>
      rise.collections.resources('the_collection_uuid',{filter: 'optional_filter_setting'}).then(function(response){
        resources = response.text;
      });
    </pre>
    <p>Live Example: calling</p>
    <pre>
      rise.collections.resources(collections[0]['uuid']).then(function(response){
         resources = response.text;
         document.getElementById("result_col_res").innerHTML = resources;
      });  
    </pre>
    returns:
      <pre>
        <script>
          rise.collections.all().then(function(response){
             collections = JSON.parse(response.text);
             rise.collections.resources(collections[0]['uuid']).then(function(response){
                resources = response.text;
                document.getElementById("result_col_res").innerHTML = resources;
             }); 
          });
        </script>
        <pre id='result_col_res'></pre>
      </pre>

    <h3>Resources</h3>
    <p>All other functions are used in the same way as described above. Here is how to get all the resources the current user has access to.</p>
    <pre>
      rise.resources.all({filter: 'optional_filter_setting'}).then(function(response){
        resources = response.text;
        // as an array: resources = JSON.parse(response.text);
      });
    </pre>
    <p>Live Example: calling</p>
    <pre>
      rise.resources.all().then(function(response){
         resources = response.text;
         document.getElementById("result_resources").innerHTML = resources;
      });  
    </pre>
    returns:
      <pre>
        <script>
          rise.resources.all().then(function(response){
             resources = response.text;
             document.getElementById("result_resources").innerHTML = resources;
          });  
        </script>
        <pre id='result_resources'></pre>
      </pre>

    <h3>Resource Sections</h3>
    <p>You can fetch all the sections for a particular resource by using the following:</p>
    <pre>
      rise.resources.sections('the_resource_uuid',{filter: 'optional_filter_setting'}).then(function(response){
        sections = response.text;
        // as an array: sections = JSON.parse(response.text);
      });
    </pre>
    <p>Live Example: calling</p>
    <pre>
      rise.resources.sections(resources[0]['uuid']).then(function(response){
         sections = response.text;
         document.getElementById("result_res_sec").innerHTML = sections;
      });  
    </pre>
    returns:
      <pre>
        <script>
          rise.resources.all().then(function(response){
             resources = JSON.parse(response.text);
             rise.resources.sections(resources[0]['uuid']).then(function(response){
                sections = response.text;
                document.getElementById("result_res_sec").innerHTML = sections;
             }); 
          });
        </script>
        <pre id='result_res_sec'></pre>
      </pre>

    <h3>Section Content Units</h3>
    <p>To get all the content units for a particular section, you have to call the following:</p>
    <pre>
      rise.sections.contentUnits('section_uuid').then(function(response){
        content_units = response.text;
        // as an array: content_units = JSON.parse(response.text);
      });
    </pre>
    <p>Live Example: calling</p>
    <pre>
      rise.sections.contentUnits(sections[0]['uuid']).then(function(response){
         content_units = response.text;
         document.getElementById("result_sec_cu").innerHTML = content_units;
      });  
    </pre>
    returns:
      <pre>
        <script>
          rise.resources.all().then(function(response){
             resources = JSON.parse(response.text);
             rise.resources.sections(resources[0]['uuid']).then(function(response){
                sections = JSON.parse(response.text);
                rise.sections.contentUnits(sections[0]['uuid']).then(function(response){
                   content_units = response.text;
                   document.getElementById("result_sec_cu").innerHTML = content_units;
                }); 
             }); 
          });
        </script>
        <pre id='result_sec_cu'></pre>
      </pre>
  </div>
</body>
</html>
